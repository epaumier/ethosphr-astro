---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import Searchbar from "@components/searchbar.astro"; // Add this import

// Filter blog entries with 'draft: false' & date before current date
const publishedBlogEntries = await getCollection("blog", ({ data }) => {
  return !data.draft && data.publishDate < new Date();
});

// Sort content entries by publication date
publishedBlogEntries.sort(function (a, b) {
  return b.data.publishDate.valueOf() - a.data.publishDate.valueOf();
});

export function getStaticPaths() {
  return [{ params: { lang: "en" } }, { params: { lang: "fr" } }];
}
---

<Layout title="Blog">
  <Container>
    <main class="mt-16">
      <Searchbar />
      <ul class="grid gap-16 max-w-4xl mx-auto" id="blogList">
        {
          publishedBlogEntries.map((blogPostEntry, index) => (
            <li class="blog-item">
              <a href={`/post/${blogPostEntry.slug}`}>
                <div class="grid md:grid-cols-2 gap-5 md:gap-10 items-center">
                  {blogPostEntry.data.image.src && (
                    <Image
                      src={blogPostEntry.data.image.src}
                      alt={blogPostEntry.data.image.alt}
                      sizes="(max-width: 800px) 100vw, 800px"
                      loading={index <= 2 ? "eager" : "lazy"}
                      decoding={index <= 2 ? "sync" : "async"}
                      class="w-full rounded-md"
                      crossorigin="anonymous"
                      inferSize={
                        typeof blogPostEntry.data.image.src === "string"
                      }
                    />
                  )}
                  <div>
                    <span class="text-blue-400 uppercase tracking-wider text-sm font-medium">
                      {blogPostEntry.data.category}
                    </span>

                    <h2 class="text-3xl font-semibold leading-snug tracking-tight mt-1 ">
                      {blogPostEntry.data.title}
                    </h2>

                    <div class="flex gap-2 mt-3">
                      <span class="text-gray-400">
                        {blogPostEntry.data.author}
                      </span>
                      <span class="text-gray-400">â€¢ </span>
                      <time
                        class="text-gray-400"
                        datetime={blogPostEntry.data.publishDate.toISOString()}>
                        {blogPostEntry.data.publishDate.toDateString()}
                      </time>
                    </div>
                  </div>
                </div>
              </a>
            </li>
          ))
        }
      </ul>
    </main>
  </Container>
</Layout>

<script>
  // Function to update the URL with the search term
  function updateURL(searchTerm: string) {
    const url = new URL(window.location.href);
    if (searchTerm) {
      url.searchParams.set("search", searchTerm);
    } else {
      url.searchParams.delete("search");
    }
    history.pushState({}, "", url);
  }

  // Function to filter blog items
  function filterBlogItems(searchTerm: string) {
    const blogItems = document.querySelectorAll<HTMLLIElement>(".blog-item")!;
    blogItems.forEach((item) => {
      const title = item.querySelector("h2")!.textContent!.toLowerCase();
      if (title.includes(searchTerm.toLowerCase())) {
        item.style.display = "block";
      } else {
        item.style.display = "none";
      }
    });
  }

  document.addEventListener("astro:page-load", () => {
    const searchBar = document.querySelector<HTMLInputElement>(
      'input[type="search"]'
    )!;

    // Set initial search term from URL
    const urlParams = new URLSearchParams(window.location.search);
    const initialSearchTerm = urlParams.get("search") || "";
    searchBar.value = initialSearchTerm;
    filterBlogItems(initialSearchTerm);

    // Add event listener for search input
    searchBar.addEventListener("input", (e) => {
      const searchTerm = (e.target as HTMLInputElement).value;
      filterBlogItems(searchTerm);
      updateURL(searchTerm);
    });
  });
</script>
